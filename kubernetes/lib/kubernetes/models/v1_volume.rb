=begin
#Kubernetes

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1.14.6

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.0

=end

require 'date'

module Kubernetes
  # Volume represents a named volume in a pod that may be accessed by any container in the pod.
  class V1Volume
    attr_accessor :aws_elastic_block_store

    attr_accessor :azure_disk

    attr_accessor :azure_file

    attr_accessor :cephfs

    attr_accessor :cinder

    attr_accessor :config_map

    attr_accessor :csi

    attr_accessor :downward_api

    attr_accessor :empty_dir

    attr_accessor :fc

    attr_accessor :flex_volume

    attr_accessor :flocker

    attr_accessor :gce_persistent_disk

    attr_accessor :git_repo

    attr_accessor :glusterfs

    attr_accessor :host_path

    attr_accessor :iscsi

    # Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    attr_accessor :name

    attr_accessor :nfs

    attr_accessor :persistent_volume_claim

    attr_accessor :photon_persistent_disk

    attr_accessor :portworx_volume

    attr_accessor :projected

    attr_accessor :quobyte

    attr_accessor :rbd

    attr_accessor :scale_io

    attr_accessor :secret

    attr_accessor :storageos

    attr_accessor :vsphere_volume

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'aws_elastic_block_store' => :'awsElasticBlockStore',
        :'azure_disk' => :'azureDisk',
        :'azure_file' => :'azureFile',
        :'cephfs' => :'cephfs',
        :'cinder' => :'cinder',
        :'config_map' => :'configMap',
        :'csi' => :'csi',
        :'downward_api' => :'downwardAPI',
        :'empty_dir' => :'emptyDir',
        :'fc' => :'fc',
        :'flex_volume' => :'flexVolume',
        :'flocker' => :'flocker',
        :'gce_persistent_disk' => :'gcePersistentDisk',
        :'git_repo' => :'gitRepo',
        :'glusterfs' => :'glusterfs',
        :'host_path' => :'hostPath',
        :'iscsi' => :'iscsi',
        :'name' => :'name',
        :'nfs' => :'nfs',
        :'persistent_volume_claim' => :'persistentVolumeClaim',
        :'photon_persistent_disk' => :'photonPersistentDisk',
        :'portworx_volume' => :'portworxVolume',
        :'projected' => :'projected',
        :'quobyte' => :'quobyte',
        :'rbd' => :'rbd',
        :'scale_io' => :'scaleIO',
        :'secret' => :'secret',
        :'storageos' => :'storageos',
        :'vsphere_volume' => :'vsphereVolume'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'aws_elastic_block_store' => :'V1AWSElasticBlockStoreVolumeSource',
        :'azure_disk' => :'V1AzureDiskVolumeSource',
        :'azure_file' => :'V1AzureFileVolumeSource',
        :'cephfs' => :'V1CephFSVolumeSource',
        :'cinder' => :'V1CinderVolumeSource',
        :'config_map' => :'V1ConfigMapVolumeSource',
        :'csi' => :'V1CSIVolumeSource',
        :'downward_api' => :'V1DownwardAPIVolumeSource',
        :'empty_dir' => :'V1EmptyDirVolumeSource',
        :'fc' => :'V1FCVolumeSource',
        :'flex_volume' => :'V1FlexVolumeSource',
        :'flocker' => :'V1FlockerVolumeSource',
        :'gce_persistent_disk' => :'V1GCEPersistentDiskVolumeSource',
        :'git_repo' => :'V1GitRepoVolumeSource',
        :'glusterfs' => :'V1GlusterfsVolumeSource',
        :'host_path' => :'V1HostPathVolumeSource',
        :'iscsi' => :'V1ISCSIVolumeSource',
        :'name' => :'String',
        :'nfs' => :'V1NFSVolumeSource',
        :'persistent_volume_claim' => :'V1PersistentVolumeClaimVolumeSource',
        :'photon_persistent_disk' => :'V1PhotonPersistentDiskVolumeSource',
        :'portworx_volume' => :'V1PortworxVolumeSource',
        :'projected' => :'V1ProjectedVolumeSource',
        :'quobyte' => :'V1QuobyteVolumeSource',
        :'rbd' => :'V1RBDVolumeSource',
        :'scale_io' => :'V1ScaleIOVolumeSource',
        :'secret' => :'V1SecretVolumeSource',
        :'storageos' => :'V1StorageOSVolumeSource',
        :'vsphere_volume' => :'V1VsphereVirtualDiskVolumeSource'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubernetes::V1Volume` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubernetes::V1Volume`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'aws_elastic_block_store')
        self.aws_elastic_block_store = attributes[:'aws_elastic_block_store']
      end

      if attributes.key?(:'azure_disk')
        self.azure_disk = attributes[:'azure_disk']
      end

      if attributes.key?(:'azure_file')
        self.azure_file = attributes[:'azure_file']
      end

      if attributes.key?(:'cephfs')
        self.cephfs = attributes[:'cephfs']
      end

      if attributes.key?(:'cinder')
        self.cinder = attributes[:'cinder']
      end

      if attributes.key?(:'config_map')
        self.config_map = attributes[:'config_map']
      end

      if attributes.key?(:'csi')
        self.csi = attributes[:'csi']
      end

      if attributes.key?(:'downward_api')
        self.downward_api = attributes[:'downward_api']
      end

      if attributes.key?(:'empty_dir')
        self.empty_dir = attributes[:'empty_dir']
      end

      if attributes.key?(:'fc')
        self.fc = attributes[:'fc']
      end

      if attributes.key?(:'flex_volume')
        self.flex_volume = attributes[:'flex_volume']
      end

      if attributes.key?(:'flocker')
        self.flocker = attributes[:'flocker']
      end

      if attributes.key?(:'gce_persistent_disk')
        self.gce_persistent_disk = attributes[:'gce_persistent_disk']
      end

      if attributes.key?(:'git_repo')
        self.git_repo = attributes[:'git_repo']
      end

      if attributes.key?(:'glusterfs')
        self.glusterfs = attributes[:'glusterfs']
      end

      if attributes.key?(:'host_path')
        self.host_path = attributes[:'host_path']
      end

      if attributes.key?(:'iscsi')
        self.iscsi = attributes[:'iscsi']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'nfs')
        self.nfs = attributes[:'nfs']
      end

      if attributes.key?(:'persistent_volume_claim')
        self.persistent_volume_claim = attributes[:'persistent_volume_claim']
      end

      if attributes.key?(:'photon_persistent_disk')
        self.photon_persistent_disk = attributes[:'photon_persistent_disk']
      end

      if attributes.key?(:'portworx_volume')
        self.portworx_volume = attributes[:'portworx_volume']
      end

      if attributes.key?(:'projected')
        self.projected = attributes[:'projected']
      end

      if attributes.key?(:'quobyte')
        self.quobyte = attributes[:'quobyte']
      end

      if attributes.key?(:'rbd')
        self.rbd = attributes[:'rbd']
      end

      if attributes.key?(:'scale_io')
        self.scale_io = attributes[:'scale_io']
      end

      if attributes.key?(:'secret')
        self.secret = attributes[:'secret']
      end

      if attributes.key?(:'storageos')
        self.storageos = attributes[:'storageos']
      end

      if attributes.key?(:'vsphere_volume')
        self.vsphere_volume = attributes[:'vsphere_volume']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aws_elastic_block_store == o.aws_elastic_block_store &&
          azure_disk == o.azure_disk &&
          azure_file == o.azure_file &&
          cephfs == o.cephfs &&
          cinder == o.cinder &&
          config_map == o.config_map &&
          csi == o.csi &&
          downward_api == o.downward_api &&
          empty_dir == o.empty_dir &&
          fc == o.fc &&
          flex_volume == o.flex_volume &&
          flocker == o.flocker &&
          gce_persistent_disk == o.gce_persistent_disk &&
          git_repo == o.git_repo &&
          glusterfs == o.glusterfs &&
          host_path == o.host_path &&
          iscsi == o.iscsi &&
          name == o.name &&
          nfs == o.nfs &&
          persistent_volume_claim == o.persistent_volume_claim &&
          photon_persistent_disk == o.photon_persistent_disk &&
          portworx_volume == o.portworx_volume &&
          projected == o.projected &&
          quobyte == o.quobyte &&
          rbd == o.rbd &&
          scale_io == o.scale_io &&
          secret == o.secret &&
          storageos == o.storageos &&
          vsphere_volume == o.vsphere_volume
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [aws_elastic_block_store, azure_disk, azure_file, cephfs, cinder, config_map, csi, downward_api, empty_dir, fc, flex_volume, flocker, gce_persistent_disk, git_repo, glusterfs, host_path, iscsi, name, nfs, persistent_volume_claim, photon_persistent_disk, portworx_volume, projected, quobyte, rbd, scale_io, secret, storageos, vsphere_volume].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Kubernetes.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
