=begin
#Kubernetes

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1.14.6

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.0

=end

require 'date'

module Kubernetes
  # Represents storage that is managed by an external CSI volume driver (Beta feature)
  class V1CSIPersistentVolumeSource
    attr_accessor :controller_publish_secret_ref

    # Driver is the name of the driver to use for this volume. Required.
    attr_accessor :driver

    # Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\".
    attr_accessor :fs_type

    attr_accessor :node_publish_secret_ref

    attr_accessor :node_stage_secret_ref

    # Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
    attr_accessor :read_only

    # Attributes of the volume to publish.
    attr_accessor :volume_attributes

    # VolumeHandle is the unique volume name returned by the CSI volume pluginâ€™s CreateVolume to refer to the volume on all subsequent calls. Required.
    attr_accessor :volume_handle

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'controller_publish_secret_ref' => :'controllerPublishSecretRef',
        :'driver' => :'driver',
        :'fs_type' => :'fsType',
        :'node_publish_secret_ref' => :'nodePublishSecretRef',
        :'node_stage_secret_ref' => :'nodeStageSecretRef',
        :'read_only' => :'readOnly',
        :'volume_attributes' => :'volumeAttributes',
        :'volume_handle' => :'volumeHandle'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'controller_publish_secret_ref' => :'V1SecretReference',
        :'driver' => :'String',
        :'fs_type' => :'String',
        :'node_publish_secret_ref' => :'V1SecretReference',
        :'node_stage_secret_ref' => :'V1SecretReference',
        :'read_only' => :'Boolean',
        :'volume_attributes' => :'Hash<String, String>',
        :'volume_handle' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubernetes::V1CSIPersistentVolumeSource` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubernetes::V1CSIPersistentVolumeSource`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'controller_publish_secret_ref')
        self.controller_publish_secret_ref = attributes[:'controller_publish_secret_ref']
      end

      if attributes.key?(:'driver')
        self.driver = attributes[:'driver']
      end

      if attributes.key?(:'fs_type')
        self.fs_type = attributes[:'fs_type']
      end

      if attributes.key?(:'node_publish_secret_ref')
        self.node_publish_secret_ref = attributes[:'node_publish_secret_ref']
      end

      if attributes.key?(:'node_stage_secret_ref')
        self.node_stage_secret_ref = attributes[:'node_stage_secret_ref']
      end

      if attributes.key?(:'read_only')
        self.read_only = attributes[:'read_only']
      end

      if attributes.key?(:'volume_attributes')
        if (value = attributes[:'volume_attributes']).is_a?(Hash)
          self.volume_attributes = value
        end
      end

      if attributes.key?(:'volume_handle')
        self.volume_handle = attributes[:'volume_handle']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @driver.nil?
        invalid_properties.push('invalid value for "driver", driver cannot be nil.')
      end

      if @volume_handle.nil?
        invalid_properties.push('invalid value for "volume_handle", volume_handle cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @driver.nil?
      return false if @volume_handle.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          controller_publish_secret_ref == o.controller_publish_secret_ref &&
          driver == o.driver &&
          fs_type == o.fs_type &&
          node_publish_secret_ref == o.node_publish_secret_ref &&
          node_stage_secret_ref == o.node_stage_secret_ref &&
          read_only == o.read_only &&
          volume_attributes == o.volume_attributes &&
          volume_handle == o.volume_handle
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [controller_publish_secret_ref, driver, fs_type, node_publish_secret_ref, node_stage_secret_ref, read_only, volume_attributes, volume_handle].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Kubernetes.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
