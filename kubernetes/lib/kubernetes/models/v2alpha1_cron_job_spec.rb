=begin
#Kubernetes

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1.14.6

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.0

=end

require 'date'

module Kubernetes
  # CronJobSpec describes how the job execution will look like and when it will actually run.
  class V2alpha1CronJobSpec
    # Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one
    attr_accessor :concurrency_policy

    # The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
    attr_accessor :failed_jobs_history_limit

    attr_accessor :job_template

    # The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
    attr_accessor :schedule

    # Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
    attr_accessor :starting_deadline_seconds

    # The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
    attr_accessor :successful_jobs_history_limit

    # This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
    attr_accessor :suspend

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'concurrency_policy' => :'concurrencyPolicy',
        :'failed_jobs_history_limit' => :'failedJobsHistoryLimit',
        :'job_template' => :'jobTemplate',
        :'schedule' => :'schedule',
        :'starting_deadline_seconds' => :'startingDeadlineSeconds',
        :'successful_jobs_history_limit' => :'successfulJobsHistoryLimit',
        :'suspend' => :'suspend'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'concurrency_policy' => :'String',
        :'failed_jobs_history_limit' => :'Integer',
        :'job_template' => :'V2alpha1JobTemplateSpec',
        :'schedule' => :'String',
        :'starting_deadline_seconds' => :'Integer',
        :'successful_jobs_history_limit' => :'Integer',
        :'suspend' => :'Boolean'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubernetes::V2alpha1CronJobSpec` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubernetes::V2alpha1CronJobSpec`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'concurrency_policy')
        self.concurrency_policy = attributes[:'concurrency_policy']
      end

      if attributes.key?(:'failed_jobs_history_limit')
        self.failed_jobs_history_limit = attributes[:'failed_jobs_history_limit']
      end

      if attributes.key?(:'job_template')
        self.job_template = attributes[:'job_template']
      end

      if attributes.key?(:'schedule')
        self.schedule = attributes[:'schedule']
      end

      if attributes.key?(:'starting_deadline_seconds')
        self.starting_deadline_seconds = attributes[:'starting_deadline_seconds']
      end

      if attributes.key?(:'successful_jobs_history_limit')
        self.successful_jobs_history_limit = attributes[:'successful_jobs_history_limit']
      end

      if attributes.key?(:'suspend')
        self.suspend = attributes[:'suspend']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @job_template.nil?
        invalid_properties.push('invalid value for "job_template", job_template cannot be nil.')
      end

      if @schedule.nil?
        invalid_properties.push('invalid value for "schedule", schedule cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @job_template.nil?
      return false if @schedule.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          concurrency_policy == o.concurrency_policy &&
          failed_jobs_history_limit == o.failed_jobs_history_limit &&
          job_template == o.job_template &&
          schedule == o.schedule &&
          starting_deadline_seconds == o.starting_deadline_seconds &&
          successful_jobs_history_limit == o.successful_jobs_history_limit &&
          suspend == o.suspend
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [concurrency_policy, failed_jobs_history_limit, job_template, schedule, starting_deadline_seconds, successful_jobs_history_limit, suspend].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Kubernetes.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
