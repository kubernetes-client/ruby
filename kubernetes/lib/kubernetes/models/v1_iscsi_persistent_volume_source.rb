=begin
#Kubernetes

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1.14.6

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.0

=end

require 'date'

module Kubernetes
  # ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
  class V1ISCSIPersistentVolumeSource
    # whether support iSCSI Discovery CHAP authentication
    attr_accessor :chap_auth_discovery

    # whether support iSCSI Session CHAP authentication
    attr_accessor :chap_auth_session

    # Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    attr_accessor :fs_type

    # Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
    attr_accessor :initiator_name

    # Target iSCSI Qualified Name.
    attr_accessor :iqn

    # iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
    attr_accessor :iscsi_interface

    # iSCSI Target Lun number.
    attr_accessor :lun

    # iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    attr_accessor :portals

    # ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    attr_accessor :read_only

    attr_accessor :secret_ref

    # iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    attr_accessor :target_portal

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'chap_auth_discovery' => :'chapAuthDiscovery',
        :'chap_auth_session' => :'chapAuthSession',
        :'fs_type' => :'fsType',
        :'initiator_name' => :'initiatorName',
        :'iqn' => :'iqn',
        :'iscsi_interface' => :'iscsiInterface',
        :'lun' => :'lun',
        :'portals' => :'portals',
        :'read_only' => :'readOnly',
        :'secret_ref' => :'secretRef',
        :'target_portal' => :'targetPortal'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'chap_auth_discovery' => :'Boolean',
        :'chap_auth_session' => :'Boolean',
        :'fs_type' => :'String',
        :'initiator_name' => :'String',
        :'iqn' => :'String',
        :'iscsi_interface' => :'String',
        :'lun' => :'Integer',
        :'portals' => :'Array<String>',
        :'read_only' => :'Boolean',
        :'secret_ref' => :'V1SecretReference',
        :'target_portal' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubernetes::V1ISCSIPersistentVolumeSource` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubernetes::V1ISCSIPersistentVolumeSource`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'chap_auth_discovery')
        self.chap_auth_discovery = attributes[:'chap_auth_discovery']
      end

      if attributes.key?(:'chap_auth_session')
        self.chap_auth_session = attributes[:'chap_auth_session']
      end

      if attributes.key?(:'fs_type')
        self.fs_type = attributes[:'fs_type']
      end

      if attributes.key?(:'initiator_name')
        self.initiator_name = attributes[:'initiator_name']
      end

      if attributes.key?(:'iqn')
        self.iqn = attributes[:'iqn']
      end

      if attributes.key?(:'iscsi_interface')
        self.iscsi_interface = attributes[:'iscsi_interface']
      end

      if attributes.key?(:'lun')
        self.lun = attributes[:'lun']
      end

      if attributes.key?(:'portals')
        if (value = attributes[:'portals']).is_a?(Array)
          self.portals = value
        end
      end

      if attributes.key?(:'read_only')
        self.read_only = attributes[:'read_only']
      end

      if attributes.key?(:'secret_ref')
        self.secret_ref = attributes[:'secret_ref']
      end

      if attributes.key?(:'target_portal')
        self.target_portal = attributes[:'target_portal']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @iqn.nil?
        invalid_properties.push('invalid value for "iqn", iqn cannot be nil.')
      end

      if @lun.nil?
        invalid_properties.push('invalid value for "lun", lun cannot be nil.')
      end

      if @target_portal.nil?
        invalid_properties.push('invalid value for "target_portal", target_portal cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @iqn.nil?
      return false if @lun.nil?
      return false if @target_portal.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          chap_auth_discovery == o.chap_auth_discovery &&
          chap_auth_session == o.chap_auth_session &&
          fs_type == o.fs_type &&
          initiator_name == o.initiator_name &&
          iqn == o.iqn &&
          iscsi_interface == o.iscsi_interface &&
          lun == o.lun &&
          portals == o.portals &&
          read_only == o.read_only &&
          secret_ref == o.secret_ref &&
          target_portal == o.target_portal
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [chap_auth_discovery, chap_auth_session, fs_type, initiator_name, iqn, iscsi_interface, lun, portals, read_only, secret_ref, target_portal].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Kubernetes.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
