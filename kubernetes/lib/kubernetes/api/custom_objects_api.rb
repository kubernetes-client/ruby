=begin
#Kubernetes

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1.14.6

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.0

=end

require 'cgi'

module Kubernetes
  class CustomObjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a cluster scoped Custom object
    # @param group [String] The custom resource&#39;s group name
    # @param version [String] The custom resource&#39;s version
    # @param plural [String] The custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param body [Object] The JSON schema of the Resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
    # @return [Object]
    def create_cluster_custom_object(group, version, plural, body, opts = {})
      data, _status_code, _headers = create_cluster_custom_object_with_http_info(group, version, plural, body, opts)
      data
    end

    # Creates a cluster scoped Custom object
    # @param group [String] The custom resource&#39;s group name
    # @param version [String] The custom resource&#39;s version
    # @param plural [String] The custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param body [Object] The JSON schema of the Resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def create_cluster_custom_object_with_http_info(group, version, plural, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.create_cluster_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.create_cluster_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.create_cluster_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.create_cluster_custom_object"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.create_cluster_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pretty'] = opts[:'pretty'] if !opts[:'pretty'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#create_cluster_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a namespace scoped Custom object
    # @param group [String] The custom resource&#39;s group name
    # @param version [String] The custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] The custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param body [Object] The JSON schema of the Resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
    # @return [Object]
    def create_namespaced_custom_object(group, version, namespace, plural, body, opts = {})
      data, _status_code, _headers = create_namespaced_custom_object_with_http_info(group, version, namespace, plural, body, opts)
      data
    end

    # Creates a namespace scoped Custom object
    # @param group [String] The custom resource&#39;s group name
    # @param version [String] The custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] The custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param body [Object] The JSON schema of the Resource to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def create_namespaced_custom_object_with_http_info(group, version, namespace, plural, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.create_namespaced_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.create_namespaced_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.create_namespaced_custom_object"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.create_namespaced_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.create_namespaced_custom_object"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.create_namespaced_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pretty'] = opts[:'pretty'] if !opts[:'pretty'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#create_namespaced_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom object&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [V1DeleteOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
    # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    # @return [Object]
    def delete_cluster_custom_object(group, version, plural, name, body, opts = {})
      data, _status_code, _headers = delete_cluster_custom_object_with_http_info(group, version, plural, name, body, opts)
      data
    end

    # Deletes the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom object&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [V1DeleteOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
    # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_cluster_custom_object_with_http_info(group, version, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.delete_cluster_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.delete_cluster_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.delete_cluster_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.delete_cluster_custom_object"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.delete_cluster_custom_object"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.delete_cluster_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}/{name}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'gracePeriodSeconds'] = opts[:'grace_period_seconds'] if !opts[:'grace_period_seconds'].nil?
      query_params[:'orphanDependents'] = opts[:'orphan_dependents'] if !opts[:'orphan_dependents'].nil?
      query_params[:'propagationPolicy'] = opts[:'propagation_policy'] if !opts[:'propagation_policy'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#delete_cluster_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [V1DeleteOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
    # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    # @return [Object]
    def delete_namespaced_custom_object(group, version, namespace, plural, name, body, opts = {})
      data, _status_code, _headers = delete_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, body, opts)
      data
    end

    # Deletes the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [V1DeleteOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
    # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.delete_namespaced_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.delete_namespaced_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.delete_namespaced_custom_object"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.delete_namespaced_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.delete_namespaced_custom_object"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.delete_namespaced_custom_object"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.delete_namespaced_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'gracePeriodSeconds'] = opts[:'grace_period_seconds'] if !opts[:'grace_period_seconds'].nil?
      query_params[:'orphanDependents'] = opts[:'orphan_dependents'] if !opts[:'orphan_dependents'].nil?
      query_params[:'propagationPolicy'] = opts[:'propagation_policy'] if !opts[:'propagation_policy'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#delete_namespaced_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom object&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_cluster_custom_object(group, version, plural, name, opts = {})
      data, _status_code, _headers = get_cluster_custom_object_with_http_info(group, version, plural, name, opts)
      data
    end

    # Returns a cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom object&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_cluster_custom_object_with_http_info(group, version, plural, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.get_cluster_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.get_cluster_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.get_cluster_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.get_cluster_custom_object"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.get_cluster_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}/{name}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#get_cluster_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # read scale of the specified custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_cluster_custom_object_scale(group, version, plural, name, opts = {})
      data, _status_code, _headers = get_cluster_custom_object_scale_with_http_info(group, version, plural, name, opts)
      data
    end

    # read scale of the specified custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_cluster_custom_object_scale_with_http_info(group, version, plural, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.get_cluster_custom_object_scale ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.get_cluster_custom_object_scale"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.get_cluster_custom_object_scale"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.get_cluster_custom_object_scale"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.get_cluster_custom_object_scale"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}/{name}/scale'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#get_cluster_custom_object_scale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # read status of the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_cluster_custom_object_status(group, version, plural, name, opts = {})
      data, _status_code, _headers = get_cluster_custom_object_status_with_http_info(group, version, plural, name, opts)
      data
    end

    # read status of the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_cluster_custom_object_status_with_http_info(group, version, plural, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.get_cluster_custom_object_status ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.get_cluster_custom_object_status"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.get_cluster_custom_object_status"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.get_cluster_custom_object_status"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.get_cluster_custom_object_status"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}/{name}/status'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#get_cluster_custom_object_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_namespaced_custom_object(group, version, namespace, plural, name, opts = {})
      data, _status_code, _headers = get_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, opts)
      data
    end

    # Returns a namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.get_namespaced_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.get_namespaced_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.get_namespaced_custom_object"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.get_namespaced_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.get_namespaced_custom_object"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.get_namespaced_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#get_namespaced_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # read scale of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_namespaced_custom_object_scale(group, version, namespace, plural, name, opts = {})
      data, _status_code, _headers = get_namespaced_custom_object_scale_with_http_info(group, version, namespace, plural, name, opts)
      data
    end

    # read scale of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_namespaced_custom_object_scale_with_http_info(group, version, namespace, plural, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.get_namespaced_custom_object_scale ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.get_namespaced_custom_object_scale"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.get_namespaced_custom_object_scale"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.get_namespaced_custom_object_scale"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.get_namespaced_custom_object_scale"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.get_namespaced_custom_object_scale"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#get_namespaced_custom_object_scale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # read status of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_namespaced_custom_object_status(group, version, namespace, plural, name, opts = {})
      data, _status_code, _headers = get_namespaced_custom_object_status_with_http_info(group, version, namespace, plural, name, opts)
      data
    end

    # read status of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_namespaced_custom_object_status_with_http_info(group, version, namespace, plural, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.get_namespaced_custom_object_status ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.get_namespaced_custom_object_status"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.get_namespaced_custom_object_status"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.get_namespaced_custom_object_status"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.get_namespaced_custom_object_status"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.get_namespaced_custom_object_status"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#get_namespaced_custom_object_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list or watch cluster scoped custom objects
    # @param group [String] The custom resource&#39;s group name
    # @param version [String] The custom resource&#39;s version
    # @param plural [String] The custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
    # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
    # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
    # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    # @option opts [Integer] :timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.
    # @return [Object]
    def list_cluster_custom_object(group, version, plural, opts = {})
      data, _status_code, _headers = list_cluster_custom_object_with_http_info(group, version, plural, opts)
      data
    end

    # list or watch cluster scoped custom objects
    # @param group [String] The custom resource&#39;s group name
    # @param version [String] The custom resource&#39;s version
    # @param plural [String] The custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
    # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
    # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
    # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    # @option opts [Integer] :timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def list_cluster_custom_object_with_http_info(group, version, plural, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.list_cluster_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.list_cluster_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.list_cluster_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.list_cluster_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pretty'] = opts[:'pretty'] if !opts[:'pretty'].nil?
      query_params[:'fieldSelector'] = opts[:'field_selector'] if !opts[:'field_selector'].nil?
      query_params[:'labelSelector'] = opts[:'label_selector'] if !opts[:'label_selector'].nil?
      query_params[:'resourceVersion'] = opts[:'resource_version'] if !opts[:'resource_version'].nil?
      query_params[:'timeoutSeconds'] = opts[:'timeout_seconds'] if !opts[:'timeout_seconds'].nil?
      query_params[:'watch'] = opts[:'watch'] if !opts[:'watch'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json;stream=watch'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#list_cluster_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list or watch namespace scoped custom objects
    # @param group [String] The custom resource&#39;s group name
    # @param version [String] The custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] The custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
    # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
    # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
    # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    # @option opts [Integer] :timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.
    # @return [Object]
    def list_namespaced_custom_object(group, version, namespace, plural, opts = {})
      data, _status_code, _headers = list_namespaced_custom_object_with_http_info(group, version, namespace, plural, opts)
      data
    end

    # list or watch namespace scoped custom objects
    # @param group [String] The custom resource&#39;s group name
    # @param version [String] The custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] The custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
    # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
    # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
    # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    # @option opts [Integer] :timeout_seconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
    # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def list_namespaced_custom_object_with_http_info(group, version, namespace, plural, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.list_namespaced_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.list_namespaced_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.list_namespaced_custom_object"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.list_namespaced_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.list_namespaced_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pretty'] = opts[:'pretty'] if !opts[:'pretty'].nil?
      query_params[:'fieldSelector'] = opts[:'field_selector'] if !opts[:'field_selector'].nil?
      query_params[:'labelSelector'] = opts[:'label_selector'] if !opts[:'label_selector'].nil?
      query_params[:'resourceVersion'] = opts[:'resource_version'] if !opts[:'resource_version'].nil?
      query_params[:'timeoutSeconds'] = opts[:'timeout_seconds'] if !opts[:'timeout_seconds'].nil?
      query_params[:'watch'] = opts[:'watch'] if !opts[:'watch'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/json;stream=watch'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#list_namespaced_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # patch the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom object&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] The JSON schema of the Resource to patch.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def patch_cluster_custom_object(group, version, plural, name, body, opts = {})
      data, _status_code, _headers = patch_cluster_custom_object_with_http_info(group, version, plural, name, body, opts)
      data
    end

    # patch the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom object&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] The JSON schema of the Resource to patch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def patch_cluster_custom_object_with_http_info(group, version, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.patch_cluster_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.patch_cluster_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.patch_cluster_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.patch_cluster_custom_object"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.patch_cluster_custom_object"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.patch_cluster_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}/{name}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/merge-patch+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#patch_cluster_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # partially update scale of the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def patch_cluster_custom_object_scale(group, version, plural, name, body, opts = {})
      data, _status_code, _headers = patch_cluster_custom_object_scale_with_http_info(group, version, plural, name, body, opts)
      data
    end

    # partially update scale of the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def patch_cluster_custom_object_scale_with_http_info(group, version, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.patch_cluster_custom_object_scale ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.patch_cluster_custom_object_scale"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.patch_cluster_custom_object_scale"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.patch_cluster_custom_object_scale"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.patch_cluster_custom_object_scale"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.patch_cluster_custom_object_scale"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}/{name}/scale'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/merge-patch+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#patch_cluster_custom_object_scale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # partially update status of the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def patch_cluster_custom_object_status(group, version, plural, name, body, opts = {})
      data, _status_code, _headers = patch_cluster_custom_object_status_with_http_info(group, version, plural, name, body, opts)
      data
    end

    # partially update status of the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def patch_cluster_custom_object_status_with_http_info(group, version, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.patch_cluster_custom_object_status ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.patch_cluster_custom_object_status"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.patch_cluster_custom_object_status"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.patch_cluster_custom_object_status"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.patch_cluster_custom_object_status"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.patch_cluster_custom_object_status"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}/{name}/status'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/merge-patch+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#patch_cluster_custom_object_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # patch the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] The JSON schema of the Resource to patch.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def patch_namespaced_custom_object(group, version, namespace, plural, name, body, opts = {})
      data, _status_code, _headers = patch_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, body, opts)
      data
    end

    # patch the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] The JSON schema of the Resource to patch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def patch_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.patch_namespaced_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.patch_namespaced_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.patch_namespaced_custom_object"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.patch_namespaced_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.patch_namespaced_custom_object"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.patch_namespaced_custom_object"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.patch_namespaced_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/merge-patch+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#patch_namespaced_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # partially update scale of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def patch_namespaced_custom_object_scale(group, version, namespace, plural, name, body, opts = {})
      data, _status_code, _headers = patch_namespaced_custom_object_scale_with_http_info(group, version, namespace, plural, name, body, opts)
      data
    end

    # partially update scale of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def patch_namespaced_custom_object_scale_with_http_info(group, version, namespace, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.patch_namespaced_custom_object_scale ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.patch_namespaced_custom_object_scale"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.patch_namespaced_custom_object_scale"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.patch_namespaced_custom_object_scale"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.patch_namespaced_custom_object_scale"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.patch_namespaced_custom_object_scale"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.patch_namespaced_custom_object_scale"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/merge-patch+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#patch_namespaced_custom_object_scale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # partially update status of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def patch_namespaced_custom_object_status(group, version, namespace, plural, name, body, opts = {})
      data, _status_code, _headers = patch_namespaced_custom_object_status_with_http_info(group, version, namespace, plural, name, body, opts)
      data
    end

    # partially update status of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def patch_namespaced_custom_object_status_with_http_info(group, version, namespace, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.patch_namespaced_custom_object_status ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.patch_namespaced_custom_object_status"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.patch_namespaced_custom_object_status"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.patch_namespaced_custom_object_status"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.patch_namespaced_custom_object_status"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.patch_namespaced_custom_object_status"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.patch_namespaced_custom_object_status"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/merge-patch+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#patch_namespaced_custom_object_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # replace the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom object&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] The JSON schema of the Resource to replace.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def replace_cluster_custom_object(group, version, plural, name, body, opts = {})
      data, _status_code, _headers = replace_cluster_custom_object_with_http_info(group, version, plural, name, body, opts)
      data
    end

    # replace the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom object&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] The JSON schema of the Resource to replace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def replace_cluster_custom_object_with_http_info(group, version, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.replace_cluster_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.replace_cluster_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.replace_cluster_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.replace_cluster_custom_object"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.replace_cluster_custom_object"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.replace_cluster_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}/{name}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#replace_cluster_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # replace scale of the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def replace_cluster_custom_object_scale(group, version, plural, name, body, opts = {})
      data, _status_code, _headers = replace_cluster_custom_object_scale_with_http_info(group, version, plural, name, body, opts)
      data
    end

    # replace scale of the specified cluster scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def replace_cluster_custom_object_scale_with_http_info(group, version, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.replace_cluster_custom_object_scale ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.replace_cluster_custom_object_scale"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.replace_cluster_custom_object_scale"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.replace_cluster_custom_object_scale"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.replace_cluster_custom_object_scale"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.replace_cluster_custom_object_scale"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}/{name}/scale'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#replace_cluster_custom_object_scale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # replace status of the cluster scoped specified custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def replace_cluster_custom_object_status(group, version, plural, name, body, opts = {})
      data, _status_code, _headers = replace_cluster_custom_object_status_with_http_info(group, version, plural, name, body, opts)
      data
    end

    # replace status of the cluster scoped specified custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def replace_cluster_custom_object_status_with_http_info(group, version, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.replace_cluster_custom_object_status ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.replace_cluster_custom_object_status"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.replace_cluster_custom_object_status"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.replace_cluster_custom_object_status"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.replace_cluster_custom_object_status"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.replace_cluster_custom_object_status"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/{plural}/{name}/status'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#replace_cluster_custom_object_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # replace the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] The JSON schema of the Resource to replace.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def replace_namespaced_custom_object(group, version, namespace, plural, name, body, opts = {})
      data, _status_code, _headers = replace_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, body, opts)
      data
    end

    # replace the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] The JSON schema of the Resource to replace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def replace_namespaced_custom_object_with_http_info(group, version, namespace, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.replace_namespaced_custom_object ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.replace_namespaced_custom_object"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.replace_namespaced_custom_object"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.replace_namespaced_custom_object"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.replace_namespaced_custom_object"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.replace_namespaced_custom_object"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.replace_namespaced_custom_object"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#replace_namespaced_custom_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # replace scale of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def replace_namespaced_custom_object_scale(group, version, namespace, plural, name, body, opts = {})
      data, _status_code, _headers = replace_namespaced_custom_object_scale_with_http_info(group, version, namespace, plural, name, body, opts)
      data
    end

    # replace scale of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def replace_namespaced_custom_object_scale_with_http_info(group, version, namespace, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.replace_namespaced_custom_object_scale ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.replace_namespaced_custom_object_scale"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.replace_namespaced_custom_object_scale"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.replace_namespaced_custom_object_scale"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.replace_namespaced_custom_object_scale"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.replace_namespaced_custom_object_scale"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.replace_namespaced_custom_object_scale"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#replace_namespaced_custom_object_scale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # replace status of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def replace_namespaced_custom_object_status(group, version, namespace, plural, name, body, opts = {})
      data, _status_code, _headers = replace_namespaced_custom_object_status_with_http_info(group, version, namespace, plural, name, body, opts)
      data
    end

    # replace status of the specified namespace scoped custom object
    # @param group [String] the custom resource&#39;s group
    # @param version [String] the custom resource&#39;s version
    # @param namespace [String] The custom resource&#39;s namespace
    # @param plural [String] the custom resource&#39;s plural name. For TPRs this would be lowercase plural kind.
    # @param name [String] the custom object&#39;s name
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def replace_namespaced_custom_object_status_with_http_info(group, version, namespace, plural, name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomObjectsApi.replace_namespaced_custom_object_status ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling CustomObjectsApi.replace_namespaced_custom_object_status"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CustomObjectsApi.replace_namespaced_custom_object_status"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CustomObjectsApi.replace_namespaced_custom_object_status"
      end
      # verify the required parameter 'plural' is set
      if @api_client.config.client_side_validation && plural.nil?
        fail ArgumentError, "Missing the required parameter 'plural' when calling CustomObjectsApi.replace_namespaced_custom_object_status"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomObjectsApi.replace_namespaced_custom_object_status"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomObjectsApi.replace_namespaced_custom_object_status"
      end
      # resource path
      local_var_path = '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status'.sub('{' + 'group' + '}', CGI.escape(group.to_s).gsub('%2F', '/')).sub('{' + 'version' + '}', CGI.escape(version.to_s).gsub('%2F', '/')).sub('{' + 'namespace' + '}', CGI.escape(namespace.to_s).gsub('%2F', '/')).sub('{' + 'plural' + '}', CGI.escape(plural.to_s).gsub('%2F', '/')).sub('{' + 'name' + '}', CGI.escape(name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BearerToken']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomObjectsApi#replace_namespaced_custom_object_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
